{"ast":null,"code":"var _jsxFileName = \"/Users/doosan15/Desktop/web/github/quizreact/src/App.js\";\nimport React from 'react';\nimport questionlist from './questionlist.json';\nimport './App.css';\n\nfunction App() {\n  //퀴즈영역 생성\n  let quiz = document.getElementById(\"quiz\"); //입력값 관리\n\n  const result = []; //퀴즈 영역의 문제를 1개씩 제공\n\n  let slideIndex = 1; //보기 입력값 체크\n\n  const radioCheck = () => {\n    let radio_btn = document.getElementsByName('radio_btn');\n    let radio_btn_check = false;\n\n    for (let i = 0; i < radio_btn.length; i++) {\n      if (radio_btn[i].checked) {\n        radio_btn_check = true;\n        result.push(radio_btn[i].value);\n        this.plusSlides(1);\n        break;\n      }\n    }\n\n    if (!radio_btn_check) {\n      alert(\"답변을 선택해주세요.\");\n    }\n  }; //이전, 다음 버튼 선택에 따른 증가, 감소\n\n\n  plusSlides = n => {\n    showSlides(slideIndex += n);\n  }; //상황에 따른 슬라이드 보여주기\n\n\n  showSlides = n => {\n    let slides = document.getElementsByClassName(\"slide\");\n    const doneButton = document.getElementById(\"done\");\n    const nextButton = document.getElementById(\"next\"); // 마지막 페이지일 경우 완료버튼 제공\n\n    if (slideIndex != slides.length) {\n      doneButton.style.display = 'none';\n    } else {\n      doneButton.style.display = 'inline-block';\n    } //슬라이드가 마지막페이지 일 경우, 다음버튼 제공하지 않음\n\n\n    if (slideIndex === slides.length) {\n      nextButton.style.display = 'none';\n    } else {\n      nextButton.style.display = 'inline-block';\n    } //모든 슬라이드를 보이지 않게 하고 1개씩 보이게 함         \n\n\n    for (let i = 0; i < slides.length; i++) {\n      slides[i].style.display = \"none\";\n    }\n\n    slides[slideIndex - 1].style.display = \"block\";\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, questionlist.forEach(function (data) {\n    //질문과 보기를 slide로 묶음 (1개씩 보이게 하기 위해)\n    let slide = document.createElement('div');\n    slide.className = 'slide';\n    quiz.append(slide); //질문\n\n    let questions = document.createElement('div');\n    questions.className = 'question';\n    questions.innerHTML = data.question;\n    slide.append(questions); //보기 영역\n\n    let optionContainer = document.createElement('form');\n    optionContainer.className = 'optionContainer';\n    slide.append(optionContainer); //낱개별 보기\n\n    data.option.forEach(function (subData) {\n      let labels = document.createElement('label');\n      labels.innerHTML = '<input type=\"radio\" name=\"radio_btn\" value=' + subData.score + '>' + subData.text + '<br>';\n      optionContainer.prepend(labels);\n    });\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    id: \"done\",\n    onClick: this.resulte(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, \"\\uACB0\\uACFC \\uBCF4\\uAE30\"), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"next\",\n    onClick: this.radioCheck(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, \"\\uB2E4\\uC74C \\uC9C8\\uBB38\")), this.showSlides(slideIndex));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/doosan15/Desktop/web/github/quizreact/src/App.js"],"names":["React","questionlist","App","quiz","document","getElementById","result","slideIndex","radioCheck","radio_btn","getElementsByName","radio_btn_check","i","length","checked","push","value","plusSlides","alert","n","showSlides","slides","getElementsByClassName","doneButton","nextButton","style","display","forEach","data","slide","createElement","className","append","questions","innerHTML","question","optionContainer","option","subData","labels","score","text","prepend","resulte"],"mappings":"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","sourcesContent":["import React from 'react';\nimport questionlist from './questionlist.json';\nimport './App.css';\n\nfunction App() {\n\n  //퀴즈영역 생성\n  let quiz = document.getElementById(\"quiz\");\n  //입력값 관리\nconst result = [];\n//퀴즈 영역의 문제를 1개씩 제공\nlet slideIndex = 1;\n\n//보기 입력값 체크\nconst radioCheck = () => {\n  let radio_btn=document.getElementsByName('radio_btn');\n  let radio_btn_check=false;\n  for(let i=0; i<radio_btn.length; i++){\n      if(radio_btn[i].checked){\n          radio_btn_check=true;\n          result.push(radio_btn[i].value);\n          this.plusSlides(1);\n          break;\n      }\n  }\n  if(!radio_btn_check){\n      alert(\"답변을 선택해주세요.\");\n  }\n}\n\n//이전, 다음 버튼 선택에 따른 증가, 감소\nplusSlides = (n) => {\n  showSlides(slideIndex += n);\n}\n\n//상황에 따른 슬라이드 보여주기\nshowSlides= (n) => {\n  let slides = document.getElementsByClassName(\"slide\");\n  const doneButton = document.getElementById(\"done\");\n  const nextButton = document.getElementById(\"next\");\n\n  // 마지막 페이지일 경우 완료버튼 제공\n  if (slideIndex != slides.length) {\n      doneButton.style.display = 'none';\n  } else {\n      doneButton.style.display = 'inline-block';\n  }\n\n  //슬라이드가 마지막페이지 일 경우, 다음버튼 제공하지 않음\n  if (slideIndex === slides.length) {\n      nextButton.style.display = 'none';\n  } else {\n      nextButton.style.display = 'inline-block';\n  }\n\n  //모든 슬라이드를 보이지 않게 하고 1개씩 보이게 함         \n  for (let i = 0; i < slides.length; i++) {\n      slides[i].style.display = \"none\";\n  }\n  slides[slideIndex - 1].style.display = \"block\";\n}\n  \n\n  return ( \n    <> \n    {/* 질문리스트 보기 */}\n    {\n      questionlist.forEach(function (data) {\n\n        //질문과 보기를 slide로 묶음 (1개씩 보이게 하기 위해)\n        let slide = document.createElement('div');\n        slide.className = 'slide';\n        quiz.append(slide);\n\n        //질문\n        let questions = document.createElement('div');\n        questions.className = 'question';\n        questions.innerHTML = data.question;\n        slide.append(questions);\n\n        //보기 영역\n        let optionContainer = document.createElement('form');\n        optionContainer.className = 'optionContainer';\n        slide.append(optionContainer);\n\n        //낱개별 보기\n        data.option.forEach(function (subData) {\n          let labels = document.createElement('label');\n          labels.innerHTML =\n            '<input type=\"radio\" name=\"radio_btn\" value=' + subData.score + '>' +\n            subData.text +\n            '<br>';\n          optionContainer.prepend(labels);\n        });\n      })   \n    }\n    {/* 버튼 생성 */}\n    <div className = 'button'>\n      <button id=\"done\" onClick={this.resulte()}>결과 보기</button>\n      <button id=\"next\" onClick={this.radioCheck()}>다음 질문</button>\n    </div>\n\n    {this.showSlides(slideIndex)}\n\n{/* \n      {            \n        function radioCheck(){\n            let radio_btn=document.getElementsByName('radio_btn');\n            let radio_btn_check=false;\n            for(let i=0; i<radio_btn.length; i++){\n                if(radio_btn[i].checked){\n                    radio_btn_check=true;\n                    result.push(radio_btn[i].value);\n                    slideIndex(1);\n                    break;\n                }\n            }\n            if(!radio_btn_check){\n                alert(\"답변을 선택해주세요.\");\n            }\n        }  \n            \n          function plusSlides(n) {\n          showSlides(slideIndex += n);\n          }\n\n          function showSlides(n) {\n          let slides = document.getElementsByClassName(\"slide\");\n          const doneButton = document.getElementById(\"done\");\n          const nextButton = document.getElementById(\"next\");\n\n          // 마지막 페이지일 경우 완료버튼 제공\n          if (slideIndex != slides.length) {\n              doneButton.style.display = 'none';\n          } else {\n              doneButton.style.display = 'inline-block';\n          }\n\n          //슬라이드가 마지막페이지 일 경우, 다음버튼 제공하지 않음\n          if (slideIndex === slides.length) {\n              nextButton.style.display = 'none';\n          } else {\n              nextButton.style.display = 'inline-block';\n          }\n\n          //모든 슬라이드를 보이지 않게 하고 1개씩 보이게 함         \n          for (let i = 0; i < slides.length; i++) {\n              slides[i].style.display = \"none\";\n          }\n          slides[slideIndex - 1].style.display = \"block\";\n          }\n    }\n        */}\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}